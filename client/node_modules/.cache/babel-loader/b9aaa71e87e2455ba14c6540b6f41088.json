{"ast":null,"code":"import _toConsumableArray from\"/Users/zacfarnworth/shop-shop/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/zacfarnworth/shop-shop/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{UPDATE_PRODUCTS,UPDATE_CATEGORIES,UPDATE_CURRENT_CATEGORY,ADD_TO_CART,ADD_MULTIPLE_TO_CART,REMOVE_FROM_CART,UPDATE_CART_QUANTITY,CLEAR_CART,TOGGLE_CART}from'./actions';// import { useReducer } from 'react';\nvar initialState={products:[],categories:[],currentCategory:'',cart:[],cartOpen:false};export var reducers=function reducers(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){// if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\ncase UPDATE_PRODUCTS:return _objectSpread(_objectSpread({},state),{},{products:_toConsumableArray(action.products)});// if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\ncase UPDATE_CATEGORIES:return _objectSpread(_objectSpread({},state),{},{categories:_toConsumableArray(action.categories)});case UPDATE_CURRENT_CATEGORY:return _objectSpread(_objectSpread({},state),{},{currentCategory:action.currentCategory});case ADD_TO_CART:return _objectSpread(_objectSpread({},state),{},{cartOpen:true,cart:[].concat(_toConsumableArray(state.cart),[action.product])});case ADD_MULTIPLE_TO_CART:return _objectSpread(_objectSpread({},state),{},{cart:[].concat(_toConsumableArray(state.cart),_toConsumableArray(action.products))});case REMOVE_FROM_CART:var newState=state.cart.filter(function(product){return product._id!==action._id;});return _objectSpread(_objectSpread({},state),{},{cartOpen:newState.length>0,cart:newState});case UPDATE_CART_QUANTITY:return _objectSpread(_objectSpread({},state),{},{cartOpen:true,cart:state.cart.map(function(product){if(action._id===product._id){product.purchaseQuantity=action.purchaseQuantity;}return product;})});case CLEAR_CART:return _objectSpread(_objectSpread({},state),{},{cartOpen:false,cart:[]});case TOGGLE_CART:return _objectSpread(_objectSpread({},state),{},{cartOpen:!state.cartOpen});default:return state;}};export default reducers;","map":{"version":3,"sources":["/Users/zacfarnworth/shop-shop/client/src/utils/reducers.js"],"names":["UPDATE_PRODUCTS","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","CLEAR_CART","TOGGLE_CART","initialState","products","categories","currentCategory","cart","cartOpen","reducers","state","action","type","product","newState","filter","_id","length","map","purchaseQuantity"],"mappings":"6TAAA,OACIA,eADJ,CAEIC,iBAFJ,CAGIC,uBAHJ,CAIIC,WAJJ,CAKIC,oBALJ,CAMIC,gBANJ,CAOIC,oBAPJ,CAQIC,UARJ,CASIC,WATJ,KAUO,WAVP,CAYA;AAEA,GAAMC,CAAAA,YAAY,CAAG,CACjBC,QAAQ,CAAE,EADO,CAEjBC,UAAU,CAAE,EAFK,CAGjBC,eAAe,CAAE,EAHA,CAIjBC,IAAI,CAAE,EAJW,CAKjBC,QAAQ,CAAE,KALO,CAArB,CAQA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAkC,IAAjCC,CAAAA,KAAiC,2DAAzBP,YAAyB,IAAXQ,CAAAA,MAAW,2CACtD,OAAQA,MAAM,CAACC,IAAf,EACI;AACA,IAAKlB,CAAAA,eAAL,CACI,sCACOgB,KADP,MAEIN,QAAQ,oBAAMO,MAAM,CAACP,QAAb,CAFZ,GAIJ;AACA,IAAKT,CAAAA,iBAAL,CACI,sCACOe,KADP,MAEIL,UAAU,oBAAMM,MAAM,CAACN,UAAb,CAFd,GAKJ,IAAKT,CAAAA,uBAAL,CACI,sCACOc,KADP,MAEIJ,eAAe,CAAEK,MAAM,CAACL,eAF5B,GAKJ,IAAKT,CAAAA,WAAL,CACI,sCACOa,KADP,MAEIF,QAAQ,CAAE,IAFd,CAGID,IAAI,8BAAMG,KAAK,CAACH,IAAZ,GAAkBI,MAAM,CAACE,OAAzB,EAHR,GAMJ,IAAKf,CAAAA,oBAAL,CACI,sCACOY,KADP,MAEIH,IAAI,8BAAMG,KAAK,CAACH,IAAZ,qBAAqBI,MAAM,CAACP,QAA5B,EAFR,GAKJ,IAAKL,CAAAA,gBAAL,CACI,GAAIe,CAAAA,QAAQ,CAAGJ,KAAK,CAACH,IAAN,CAAWQ,MAAX,CAAkB,SAAAF,OAAO,CAAI,CACxC,MAAOA,CAAAA,OAAO,CAACG,GAAR,GAAgBL,MAAM,CAACK,GAA9B,CACH,CAFc,CAAf,CAIA,sCACON,KADP,MAEIF,QAAQ,CAAEM,QAAQ,CAACG,MAAT,CAAkB,CAFhC,CAGIV,IAAI,CAAEO,QAHV,GAMJ,IAAKd,CAAAA,oBAAL,CACI,sCACOU,KADP,MAEIF,QAAQ,CAAE,IAFd,CAGID,IAAI,CAAEG,KAAK,CAACH,IAAN,CAAWW,GAAX,CAAe,SAAAL,OAAO,CAAI,CAC5B,GAAIF,MAAM,CAACK,GAAP,GAAeH,OAAO,CAACG,GAA3B,CAAgC,CAC5BH,OAAO,CAACM,gBAAR,CAA2BR,MAAM,CAACQ,gBAAlC,CACH,CACD,MAAON,CAAAA,OAAP,CACH,CALK,CAHV,GAWJ,IAAKZ,CAAAA,UAAL,CACI,sCACOS,KADP,MAEIF,QAAQ,CAAE,KAFd,CAGID,IAAI,CAAE,EAHV,GAMJ,IAAKL,CAAAA,WAAL,CACI,sCACOQ,KADP,MAEIF,QAAQ,CAAE,CAACE,KAAK,CAACF,QAFrB,GAKJ,QACI,MAAOE,CAAAA,KAAP,CAtER,CAwEH,CAzEM,CA2EP,cAAeD,CAAAA,QAAf","sourcesContent":["import {\n    UPDATE_PRODUCTS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART\n} from './actions';\n\n// import { useReducer } from 'react';\n\nconst initialState = {\n    products: [],\n    categories: [],\n    currentCategory: '',\n    cart: [],\n    cartOpen: false\n};\n\nexport const reducers = (state = initialState, action) => {\n    switch (action.type) {\n        // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n        case UPDATE_PRODUCTS:\n            return {\n                ...state,\n                products: [...action.products]\n            };\n        // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n        case UPDATE_CATEGORIES:\n            return {\n                ...state,\n                categories: [...action.categories]\n            };\n\n        case UPDATE_CURRENT_CATEGORY:\n            return {\n                ...state,\n                currentCategory: action.currentCategory\n            };\n\n        case ADD_TO_CART:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: [...state.cart, action.product]\n            };\n\n        case ADD_MULTIPLE_TO_CART:\n            return {\n                ...state,\n                cart: [...state.cart, ...action.products],\n            };\n\n        case REMOVE_FROM_CART:\n            let newState = state.cart.filter(product => {\n                return product._id !== action._id;\n            });\n\n            return {\n                ...state,\n                cartOpen: newState.length > 0,\n                cart: newState\n            };\n\n        case UPDATE_CART_QUANTITY:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: state.cart.map(product => {\n                    if (action._id === product._id) {\n                        product.purchaseQuantity = action.purchaseQuantity;\n                    }\n                    return product;\n                })\n            };\n\n        case CLEAR_CART:\n            return {\n                ...state,\n                cartOpen: false,\n                cart: []\n            };\n\n        case TOGGLE_CART:\n            return {\n                ...state,\n                cartOpen: !state.cartOpen\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default reducers;"]},"metadata":{},"sourceType":"module"}