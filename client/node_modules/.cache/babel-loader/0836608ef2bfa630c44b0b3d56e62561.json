{"ast":null,"code":"import React,{useEffect}from'react';import{useQuery}from'@apollo/react-hooks';import ProductItem from\"../ProductItem\";import{QUERY_PRODUCTS}from\"../../utils/queries\";import spinner from\"../../assets/spinner.gif\";// import { useStoreContext } from '../../utils/GlobalState';\nimport{UPDATE_PRODUCTS}from'../../utils/actions';import{idbPromise}from\"../../utils/helpers\";import{useDispatch,useSelector}from'react-redux';function ProductList(){var dispatch=useDispatch();var state=useSelector(function(state){return state;});var currentCategory=state.currentCategory;var _useQuery=useQuery(QUERY_PRODUCTS),loading=_useQuery.loading,data=_useQuery.data;useEffect(function(){if(data){dispatch({type:UPDATE_PRODUCTS,products:data.products});data.products.forEach(function(product){idbPromise('products','put',product);});// add else if to check if `loading` is undefined in `useQuery()` Hook\n}else if(!loading){// since we're offline, get all of the data from the `products` store\nidbPromise('products','get').then(function(products){// use retrieved data to set global state for offline browsing\ndispatch({type:UPDATE_PRODUCTS,products:products});});}},[data,loading,dispatch]);function filterProducts(){if(!currentCategory){return state.products;}return state.products.filter(function(product){return product.category._id===currentCategory;});}return/*#__PURE__*/React.createElement(\"div\",{className:\"my-2\"},/*#__PURE__*/React.createElement(\"h2\",null,\"Our Products:\"),state.products.length?/*#__PURE__*/React.createElement(\"div\",{className:\"flex-row\"},filterProducts().map(function(product){return/*#__PURE__*/React.createElement(ProductItem,{key:product._id,_id:product._id,image:product.image,name:product.name,price:product.price,quantity:product.quantity});})):/*#__PURE__*/React.createElement(\"h3\",null,\"You haven't added any products yet!\"),loading?/*#__PURE__*/React.createElement(\"img\",{src:spinner,alt:\"loading\"}):null);}export default ProductList;","map":{"version":3,"sources":["/Users/zacfarnworth/shop-shop/client/src/components/ProductList/index.js"],"names":["React","useEffect","useQuery","ProductItem","QUERY_PRODUCTS","spinner","UPDATE_PRODUCTS","idbPromise","useDispatch","useSelector","ProductList","dispatch","state","currentCategory","loading","data","type","products","forEach","product","then","filterProducts","filter","category","_id","length","map","image","name","price","quantity"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,QAAT,KAAyB,qBAAzB,CAEA,MAAOC,CAAAA,WAAP,KAAwB,gBAAxB,CACA,OAASC,cAAT,KAA+B,qBAA/B,CACA,MAAOC,CAAAA,OAAP,KAAoB,0BAApB,CAEA;AACA,OAASC,eAAT,KAAgC,qBAAhC,CAEA,OAASC,UAAT,KAA2B,qBAA3B,CAEA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAEA,QAASC,CAAAA,WAAT,EAAuB,CACrB,GAAMC,CAAAA,QAAQ,CAAGH,WAAW,EAA5B,CACA,GAAMI,CAAAA,KAAK,CAAGH,WAAW,CAAC,SAAAG,KAAK,QAAIA,CAAAA,KAAJ,EAAN,CAAzB,CAFqB,GAIfC,CAAAA,eAJe,CAIKD,KAJL,CAIfC,eAJe,eAMGX,QAAQ,CAACE,cAAD,CANX,CAMfU,OANe,WAMfA,OANe,CAMNC,IANM,WAMNA,IANM,CAQvBd,SAAS,CAAC,UAAM,CACd,GAAGc,IAAH,CAAS,CACPJ,QAAQ,CAAC,CACPK,IAAI,CAAEV,eADC,CAEPW,QAAQ,CAAEF,IAAI,CAACE,QAFR,CAAD,CAAR,CAKAF,IAAI,CAACE,QAAL,CAAcC,OAAd,CAAsB,SAACC,OAAD,CAAa,CACjCZ,UAAU,CAAC,UAAD,CAAa,KAAb,CAAoBY,OAApB,CAAV,CACD,CAFD,EAGA;AACD,CAVD,IAUO,IAAI,CAACL,OAAL,CAAc,CACnB;AACAP,UAAU,CAAC,UAAD,CAAa,KAAb,CAAV,CAA8Ba,IAA9B,CAAmC,SAACH,QAAD,CAAc,CAC/C;AACAN,QAAQ,CAAC,CACPK,IAAI,CAAEV,eADC,CAEPW,QAAQ,CAAEA,QAFH,CAAD,CAAR,CAID,CAND,EAOD,CACF,CArBQ,CAqBN,CAACF,IAAD,CAAOD,OAAP,CAAgBH,QAAhB,CArBM,CAAT,CAuBA,QAASU,CAAAA,cAAT,EAA0B,CACxB,GAAI,CAACR,eAAL,CAAsB,CACpB,MAAOD,CAAAA,KAAK,CAACK,QAAb,CACD,CAED,MAAOL,CAAAA,KAAK,CAACK,QAAN,CAAeK,MAAf,CAAsB,SAAAH,OAAO,QAAIA,CAAAA,OAAO,CAACI,QAAR,CAAiBC,GAAjB,GAAyBX,eAA7B,EAA7B,CAAP,CACD,CAEC,mBACE,2BAAK,SAAS,CAAC,MAAf,eACE,8CADF,CAEGD,KAAK,CAACK,QAAN,CAAeQ,MAAf,cACC,2BAAK,SAAS,CAAC,UAAf,EACKJ,cAAc,GAAGK,GAAjB,CAAqB,SAAAP,OAAO,qBACzB,oBAAC,WAAD,EACE,GAAG,CAAGA,OAAO,CAACK,GADhB,CAEE,GAAG,CAAEL,OAAO,CAACK,GAFf,CAGE,KAAK,CAAEL,OAAO,CAACQ,KAHjB,CAIE,IAAI,CAAER,OAAO,CAACS,IAJhB,CAKE,KAAK,CAAET,OAAO,CAACU,KALjB,CAME,QAAQ,CAAEV,OAAO,CAACW,QANpB,EADyB,EAA5B,CADL,CADD,cAcC,oEAhBJ,CAkBIhB,OAAO,cACT,2BAAK,GAAG,CAAET,OAAV,CAAmB,GAAG,CAAC,SAAvB,EADS,CAC4B,IAnBvC,CADF,CAuBD,CAED,cAAeK,CAAAA,WAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\n\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport spinner from \"../../assets/spinner.gif\"\n\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\n\nimport { idbPromise } from \"../../utils/helpers\";\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction ProductList() {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n\nconst { currentCategory } = state;\n\nconst { loading, data } = useQuery(QUERY_PRODUCTS);\n\nuseEffect(() => {\n  if(data) {\n    dispatch({\n      type: UPDATE_PRODUCTS,\n      products: data.products\n    });\n\n    data.products.forEach((product) => {\n      idbPromise('products', 'put', product);\n    });\n    // add else if to check if `loading` is undefined in `useQuery()` Hook\n  } else if (!loading) {\n    // since we're offline, get all of the data from the `products` store\n    idbPromise('products', 'get').then((products) => {\n      // use retrieved data to set global state for offline browsing\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: products\n      });\n    });\n  }\n}, [data, loading, dispatch]);\n\nfunction filterProducts() {\n  if (!currentCategory) {\n    return state.products;\n  }\n\n  return state.products.filter(product => product.category._id === currentCategory);\n}\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n            {filterProducts().map(product => (\n                <ProductItem\n                  key= {product._id}\n                  _id={product._id}\n                  image={product.image}\n                  name={product.name}\n                  price={product.price}\n                  quantity={product.quantity}\n                />\n            ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      { loading ? \n      <img src={spinner} alt=\"loading\" />: null}\n    </div>\n  );\n}\n\nexport default ProductList;\n"]},"metadata":{},"sourceType":"module"}