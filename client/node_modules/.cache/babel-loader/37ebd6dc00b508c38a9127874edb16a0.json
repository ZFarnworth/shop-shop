{"ast":null,"code":"import React,{useEffect}from'react';import{useQuery}from'@apollo/react-hooks';import{QUERY_CATEGORIES}from\"../../utils/queries\";// import { useStoreContext } from \"../../utils/GlobalState\";\nimport{UPDATE_CATEGORIES,UPDATE_CURRENT_CATEGORY}from'../../utils/actions';import{idbPromise}from'../../utils/helpers';import{useDispatch,useSelector}from'react-redux';function CategoryMenu(){var dispatch=useDispatch();var state=useSelector(function(state){return state;});var categories=state.categories;var _useQuery=useQuery(QUERY_CATEGORIES),loading=_useQuery.loading,categoryData=_useQuery.data;useEffect(function(){if(categoryData){dispatch({type:UPDATE_CATEGORIES,categories:categoryData.categories});categoryData.categories.forEach(function(category){idbPromise('categories','put',category);});}else if(!loading){idbPromise('categories','get').then(function(categories){dispatch({type:UPDATE_CATEGORIES,categories:categories});});}},[categoryData,loading,dispatch]);var handleClick=function handleClick(id){dispatch({type:UPDATE_CURRENT_CATEGORY,currentCategory:id});};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h2\",null,\"Choose a Category:\"),categories.map(function(item){return/*#__PURE__*/React.createElement(\"button\",{key:item._id,onClick:function onClick(){handleClick(item._id);}},item.name);}));}export default CategoryMenu;","map":{"version":3,"sources":["/Users/zacfarnworth/shop-shop/client/src/components/CategoryMenu/index.js"],"names":["React","useEffect","useQuery","QUERY_CATEGORIES","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","idbPromise","useDispatch","useSelector","CategoryMenu","dispatch","state","categories","loading","categoryData","data","type","forEach","category","then","handleClick","id","currentCategory","map","item","_id","name"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,QAAT,KAAyB,qBAAzB,CACA,OAASC,gBAAT,KAAiC,qBAAjC,CACA;AACA,OAASC,iBAAT,CAA4BC,uBAA5B,KAA2D,qBAA3D,CACA,OAASC,UAAT,KAA2B,qBAA3B,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAEA,QAASC,CAAAA,YAAT,EAAwB,CACtB,GAAMC,CAAAA,QAAQ,CAAGH,WAAW,EAA5B,CACA,GAAMI,CAAAA,KAAK,CAAGH,WAAW,CAAC,SAAAG,KAAK,QAAIA,CAAAA,KAAJ,EAAN,CAAzB,CAFsB,GAIdC,CAAAA,UAJc,CAICD,KAJD,CAIdC,UAJc,eAMkBV,QAAQ,CAACC,gBAAD,CAN1B,CAMdU,OANc,WAMdA,OANc,CAMCC,YAND,WAMLC,IANK,CAQtBd,SAAS,CAAC,UAAM,CACd,GAAIa,YAAJ,CAAkB,CAChBJ,QAAQ,CAAC,CACPM,IAAI,CAAEZ,iBADC,CAEPQ,UAAU,CAAEE,YAAY,CAACF,UAFlB,CAAD,CAAR,CAIAE,YAAY,CAACF,UAAb,CAAwBK,OAAxB,CAAgC,SAAAC,QAAQ,CAAI,CAC1CZ,UAAU,CAAC,YAAD,CAAe,KAAf,CAAsBY,QAAtB,CAAV,CACD,CAFD,EAGD,CARD,IAQO,IAAI,CAACL,OAAL,CAAc,CACnBP,UAAU,CAAC,YAAD,CAAe,KAAf,CAAV,CAAgCa,IAAhC,CAAqC,SAAAP,UAAU,CAAI,CACjDF,QAAQ,CAAC,CACPM,IAAI,CAAEZ,iBADC,CAEPQ,UAAU,CAAEA,UAFL,CAAD,CAAR,CAID,CALD,EAMD,CACF,CAjBQ,CAiBN,CAACE,YAAD,CAAeD,OAAf,CAAwBH,QAAxB,CAjBM,CAAT,CAmBA,GAAMU,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAAC,EAAE,CAAI,CACxBX,QAAQ,CAAC,CACPM,IAAI,CAAEX,uBADC,CAEPiB,eAAe,CAAED,EAFV,CAAD,CAAR,CAID,CALD,CAOA,mBACE,4CACE,mDADF,CAEGT,UAAU,CAACW,GAAX,CAAe,SAAAC,IAAI,qBAClB,8BACE,GAAG,CAAEA,IAAI,CAACC,GADZ,CAEE,OAAO,CAAE,kBAAM,CACbL,WAAW,CAACI,IAAI,CAACC,GAAN,CAAX,CACD,CAJH,EAMGD,IAAI,CAACE,IANR,CADkB,EAAnB,CAFH,CADF,CAeD,CAED,cAAejB,CAAAA,YAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\n// import { useStoreContext } from \"../../utils/GlobalState\";\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction CategoryMenu() {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n"]},"metadata":{},"sourceType":"module"}