{"ast":null,"code":"import { UPDATE_PRODUCTS, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, ADD_TO_CART, ADD_MULTIPLE_TO_CART, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, CLEAR_CART, TOGGLE_CART } from './actions'; // import { useReducer } from 'react';\n\nconst initialState = {\n  products: [],\n  categories: [],\n  currentCategory: '',\n  cart: [],\n  cartOpen: false\n};\nexport const reducers = (state = initialState, action) => {\n  switch (action.type) {\n    // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n    case UPDATE_PRODUCTS:\n      return { ...state,\n        products: [...action.products]\n      };\n    // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n\n    case UPDATE_CATEGORIES:\n      return { ...state,\n        categories: [...action.categories]\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return { ...state,\n        currentCategory: action.currentCategory\n      };\n\n    case ADD_TO_CART:\n      return { ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product]\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return { ...state,\n        cart: [...state.cart, ...action.products]\n      };\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n      return { ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n\n    case UPDATE_CART_QUANTITY:\n      return { ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n\n          return product;\n        })\n      };\n\n    case CLEAR_CART:\n      return { ...state,\n        cartOpen: false,\n        cart: []\n      };\n\n    case TOGGLE_CART:\n      return { ...state,\n        cartOpen: !state.cartOpen\n      };\n\n    default:\n      return state;\n  }\n};\nexport default reducers;","map":{"version":3,"sources":["/Users/zacfarnworth/shop-shop/client/src/utils/reducers.js"],"names":["UPDATE_PRODUCTS","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","CLEAR_CART","TOGGLE_CART","initialState","products","categories","currentCategory","cart","cartOpen","reducers","state","action","type","product","newState","filter","_id","length","map","purchaseQuantity"],"mappings":"AAAA,SACIA,eADJ,EAEIC,iBAFJ,EAGIC,uBAHJ,EAIIC,WAJJ,EAKIC,oBALJ,EAMIC,gBANJ,EAOIC,oBAPJ,EAQIC,UARJ,EASIC,WATJ,QAUO,WAVP,C,CAYA;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE,EADO;AAEjBC,EAAAA,UAAU,EAAE,EAFK;AAGjBC,EAAAA,eAAe,EAAE,EAHA;AAIjBC,EAAAA,IAAI,EAAE,EAJW;AAKjBC,EAAAA,QAAQ,EAAE;AALO,CAArB;AAQA,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AACtD,UAAQA,MAAM,CAACC,IAAf;AACI;AACA,SAAKlB,eAAL;AACI,aAAO,EACH,GAAGgB,KADA;AAEHN,QAAAA,QAAQ,EAAE,CAAC,GAAGO,MAAM,CAACP,QAAX;AAFP,OAAP;AAIJ;;AACA,SAAKT,iBAAL;AACI,aAAO,EACH,GAAGe,KADA;AAEHL,QAAAA,UAAU,EAAE,CAAC,GAAGM,MAAM,CAACN,UAAX;AAFT,OAAP;;AAKJ,SAAKT,uBAAL;AACI,aAAO,EACH,GAAGc,KADA;AAEHJ,QAAAA,eAAe,EAAEK,MAAM,CAACL;AAFrB,OAAP;;AAKJ,SAAKT,WAAL;AACI,aAAO,EACH,GAAGa,KADA;AAEHF,QAAAA,QAAQ,EAAE,IAFP;AAGHD,QAAAA,IAAI,EAAE,CAAC,GAAGG,KAAK,CAACH,IAAV,EAAgBI,MAAM,CAACE,OAAvB;AAHH,OAAP;;AAMJ,SAAKf,oBAAL;AACI,aAAO,EACH,GAAGY,KADA;AAEHH,QAAAA,IAAI,EAAE,CAAC,GAAGG,KAAK,CAACH,IAAV,EAAgB,GAAGI,MAAM,CAACP,QAA1B;AAFH,OAAP;;AAKJ,SAAKL,gBAAL;AACI,UAAIe,QAAQ,GAAGJ,KAAK,CAACH,IAAN,CAAWQ,MAAX,CAAkBF,OAAO,IAAI;AACxC,eAAOA,OAAO,CAACG,GAAR,KAAgBL,MAAM,CAACK,GAA9B;AACH,OAFc,CAAf;AAIA,aAAO,EACH,GAAGN,KADA;AAEHF,QAAAA,QAAQ,EAAEM,QAAQ,CAACG,MAAT,GAAkB,CAFzB;AAGHV,QAAAA,IAAI,EAAEO;AAHH,OAAP;;AAMJ,SAAKd,oBAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHF,QAAAA,QAAQ,EAAE,IAFP;AAGHD,QAAAA,IAAI,EAAEG,KAAK,CAACH,IAAN,CAAWW,GAAX,CAAeL,OAAO,IAAI;AAC5B,cAAIF,MAAM,CAACK,GAAP,KAAeH,OAAO,CAACG,GAA3B,EAAgC;AAC5BH,YAAAA,OAAO,CAACM,gBAAR,GAA2BR,MAAM,CAACQ,gBAAlC;AACH;;AACD,iBAAON,OAAP;AACH,SALK;AAHH,OAAP;;AAWJ,SAAKZ,UAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHF,QAAAA,QAAQ,EAAE,KAFP;AAGHD,QAAAA,IAAI,EAAE;AAHH,OAAP;;AAMJ,SAAKL,WAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHF,QAAAA,QAAQ,EAAE,CAACE,KAAK,CAACF;AAFd,OAAP;;AAKJ;AACI,aAAOE,KAAP;AAtER;AAwEH,CAzEM;AA2EP,eAAeD,QAAf","sourcesContent":["import {\n    UPDATE_PRODUCTS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART\n} from './actions';\n\n// import { useReducer } from 'react';\n\nconst initialState = {\n    products: [],\n    categories: [],\n    currentCategory: '',\n    cart: [],\n    cartOpen: false\n};\n\nexport const reducers = (state = initialState, action) => {\n    switch (action.type) {\n        // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n        case UPDATE_PRODUCTS:\n            return {\n                ...state,\n                products: [...action.products]\n            };\n        // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n        case UPDATE_CATEGORIES:\n            return {\n                ...state,\n                categories: [...action.categories]\n            };\n\n        case UPDATE_CURRENT_CATEGORY:\n            return {\n                ...state,\n                currentCategory: action.currentCategory\n            };\n\n        case ADD_TO_CART:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: [...state.cart, action.product]\n            };\n\n        case ADD_MULTIPLE_TO_CART:\n            return {\n                ...state,\n                cart: [...state.cart, ...action.products],\n            };\n\n        case REMOVE_FROM_CART:\n            let newState = state.cart.filter(product => {\n                return product._id !== action._id;\n            });\n\n            return {\n                ...state,\n                cartOpen: newState.length > 0,\n                cart: newState\n            };\n\n        case UPDATE_CART_QUANTITY:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: state.cart.map(product => {\n                    if (action._id === product._id) {\n                        product.purchaseQuantity = action.purchaseQuantity;\n                    }\n                    return product;\n                })\n            };\n\n        case CLEAR_CART:\n            return {\n                ...state,\n                cartOpen: false,\n                cart: []\n            };\n\n        case TOGGLE_CART:\n            return {\n                ...state,\n                cartOpen: !state.cartOpen\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default reducers;"]},"metadata":{},"sourceType":"module"}